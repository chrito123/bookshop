openapi: 3.0.0
info:
  title: Book Pricing API
  version: "1.0.0"
  description: API for calculating the price of a basket of books with discounts.

paths:
  /api/books/calculate-price:
    post:
      summary: Calculate the price for a basket of books
      description: >
        Calculates the total price for a basket of books. The basket is represented
        as a ShoppingBasket that contains a map where each key is a book title and the value is the number of copies.
      operationId: calculatePrice
      requestBody:
        description: A ShoppingBasket DTO containing the basket details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingBasket'
            example:
              "Clean Code": 2
              "The Clean Coder": 2
              "Clean Architecture": 2
              "Test Driven Development by Example": 1
              "Working Effectively With Legacy Code": 1
      responses:
        '200':
          description: The total calculated price for the basket.
          content:
            application/json:
              schema:
                type: number
                format: double
              example: 320.0
        '400':
          description: Bad Request - Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ShoppingBasket:
      type: object
      description: A shopping basket containing the list of books and their quantities.
      properties:
        items:
          type: object
          description: A map where each key is a book title and each value is the number of copies.
          additionalProperties:
            type: integer
      required:
        - items

    ErrorResponse:
      type: object
      description: A global error response structure.
      properties:
        status:
          type: integer
          description: HTTP status code.
          example: 400
        error:
          type: string
          description: Short error description.
          example: "Bad Request"
        message:
          type: string
          description: Detailed error message.
          example: "The input data is invalid."
      required:
        - status
        - error
        - message